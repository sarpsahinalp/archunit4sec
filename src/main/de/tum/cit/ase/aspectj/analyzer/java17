* sun.nio.fs.WindowsFileSystemProvider.readSymbolicLink(java.nio.file.Path)

* sun.nio.fs.UnixFileSystemProvider.readSymbolicLink(java.nio.file.Path)

* java.awt.Desktop.checkRead()

* java.awt.Desktop.checkExec()

* java.awt.Font.checkFontFile(int, java.io.File)

* java.lang.SecurityManager.checkDelete(java.lang.String)

* java.lang.SecurityManager.checkWrite(java.lang.String)

* java.lang.SecurityManager.checkExec(java.lang.String)

* java.lang.SecurityManager.checkRead(java.lang.String)
** java.io.File.length()
** java.io.File.isFile()
** java.io.File.lastModified()
** java.io.File.isDirectory()
** java.io.File.isHidden()
** java.io.File.canRead()
** java.io.File.exists()
** java.io.File.getUsableSpace()
** java.io.File.getTotalSpace()
** java.io.File.normalizedList()
** java.io.File.getFreeSpace()
** java.io.FileInputStream.<init>(java.io.File)
** java.io.RandomAccessFile.<init>(java.io.File, java.lang.String, boolean)
** sun.nio.fs.WindowsPath.checkRead()
** sun.nio.fs.WindowsPath.register(java.nio.file.WatchService, [Ljava.nio.file.WatchEvent$Kind;, [Ljava.nio.file.WatchEvent$Modifier;)
** sun.nio.fs.WindowsFileSystem.getRootDirectories()
** sun.nio.fs.WindowsChannelFactory.open(java.lang.String, java.lang.String, sun.nio.fs.WindowsChannelFactory$Flags, long)
** sun.nio.fs.WindowsAclFileAttributeView.checkAccess(sun.nio.fs.WindowsPath, boolean, boolean)
** sun.nio.fs.AbstractUserDefinedFileAttributeView.checkAccess(java.lang.String, boolean, boolean)
** sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(java.net.URL)
** sun.net.httpserver.simpleserver.FileServerHandler.<init>(java.nio.file.Path, java.util.function.UnaryOperator)
** sun.awt.shell.Win32ShellFolderManager2.checkFile(java.io.File, java.lang.SecurityManager)
** sun.awt.shell.Win32ShellFolder2.getFileSystemPath(int)
** sun.awt.shell.Win32ShellFolder2.listFiles(boolean)
** sun.awt.shell.ShellFolderManager.checkFile(java.io.File, java.lang.SecurityManager)
** sun.awt.image.FileImageSource.<init>(java.lang.String)
** java.util.zip.ZipFile.<init>(java.io.File, int, java.nio.charset.Charset)
** java.io.WinNTFileSystem.access(java.lang.String)
** java.io.WinNTFileSystem.resolve(java.io.File)

* java.lang.SecurityManager.checkRead(java.lang.String, java.lang.Object)


TO BAN AT ALL TIMES:
* java.lang.ProcessBuilder.start([Ljava.lang.ProcessBuilder$Redirect;)
* reflection



