com.sun.java.accessibility.util.AWTEventMonitor.checkInstallPermission()
com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.checkMBeanPermission(java.lang.String, java.lang.String, javax.management.ObjectName, java.lang.String)
com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.checkMBeanTrustPermission(java.lang.Class)
com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport.getClassLoader(javax.management.ObjectName)
com.sun.jmx.mbeanserver.JmxMBeanServer.checkMBeanPermission(java.lang.String, java.lang.String, javax.management.ObjectName, java.lang.String)
com.sun.jmx.mbeanserver.JmxMBeanServer.checkNewMBeanServerPermission()
com.sun.jmx.mbeanserver.MBeanInstantiator.checkMBeanPermission(java.lang.String, java.lang.String, javax.management.ObjectName, java.lang.String)
com.sun.jmx.remote.internal.ServerNotifForwarder.checkMBeanPermission(javax.management.MBeanServer, javax.management.ObjectName, java.lang.String)
com.sun.jmx.remote.security.HashedPasswordManager.loadPasswords()
com.sun.jmx.remote.security.JMXPluggableAuthenticator.<init>(java.util.Map)
com.sun.jndi.dns.DnsContextFactory.filterNameServers(java.util.List, boolean)
com.sun.jndi.rmi.registry.RegistryContext.installSecurityMgr()
com.sun.management.internal.DiagnosticCommandImpl$Wrapper.execute([Ljava.lang.String;)
com.sun.management.internal.HotSpotDiagnostic.dumpHeap(java.lang.String, boolean)
com.sun.media.sound.JSSecurityManager.checkRecordPermission()
com.sun.naming.internal.NamingManagerHelper.setObjectFactoryBuilder(javax.naming.spi.ObjectFactoryBuilder)
com.sun.net.httpserver.spi.HttpServerProvider.<init>()
com.sun.org.apache.xalan.internal.utils.ObjectFactory.findProviderClass(java.lang.String, java.lang.ClassLoader, boolean)
com.sun.org.apache.xerces.internal.utils.ObjectFactory.findProviderClass(java.lang.String, java.lang.ClassLoader, boolean)
com.sun.org.apache.xml.internal.security.utils.JavaUtils.checkRegisterPermission()
com.sun.security.jgss.ExtendedGSSContextImpl.inquireSecContext(com.sun.security.jgss.InquireType)
com.sun.tools.attach.spi.AttachProvider.<init>()
com.sun.tools.jdi.VirtualMachineManagerImpl.virtualMachineManager()
java.applet.Applet.setStub(java.applet.AppletStub)
java.awt.Desktop.checkAWTPermission()
java.awt.Desktop.checkEventsProcessingPermission()
java.awt.Desktop.checkExec()
java.awt.Desktop.checkQuitPermission()
java.awt.Desktop.checkRead()
java.awt.Desktop.moveToTrash(java.io.File)
java.awt.Desktop.print(java.io.File)
java.awt.Desktop.setPrintFileHandler(java.awt.desktop.PrintFilesHandler)
java.awt.Dialog.checkModalityPermission(java.awt.Dialog$ModalityType)
java.awt.Font.checkFontFile(int, java.io.File)
java.awt.KeyboardFocusManager.checkReplaceKFMPermission()
java.awt.MouseInfo.getPointerInfo()
java.awt.Robot.checkRobotAllowed()
java.awt.Robot.checkScreenCaptureAllowed()
java.awt.SystemTray.checkSystemTrayAllowed()
java.awt.Taskbar.checkEventsProcessingPermission()
java.awt.TextComponent.canAccessClipboard()
java.awt.Toolkit.addAWTEventListener(java.awt.event.AWTEventListener, long)
java.awt.Toolkit.getAWTEventListeners()
java.awt.Toolkit.getAWTEventListeners(long)
java.awt.Toolkit.getSystemEventQueue()
java.awt.Toolkit.removeAWTEventListener(java.awt.event.AWTEventListener)
java.awt.Window.setAlwaysOnTop(boolean)
java.awt.Window.setModalExclusionType(java.awt.Dialog$ModalExclusionType)
java.awt.Window.setWarningString()
java.awt.datatransfer.DataFlavor.tryToLoadClass(java.lang.String, java.lang.ClassLoader)
java.awt.event.InputEvent.canAccessSystemClipboard()
java.awt.print.PrinterJob.getPrinterJob()
java.beans.Beans.setDesignTime(boolean)
java.beans.Beans.setGuiAvailable(boolean)
java.beans.Introspector.setBeanInfoSearchPath([Ljava.lang.String;)
java.beans.PropertyEditorManager.registerEditor(java.lang.Class, java.lang.Class)
java.beans.PropertyEditorManager.setEditorSearchPath([Ljava.lang.String;)
java.io.File.canExecute()
java.io.File.canRead()
java.io.File.canWrite()
java.io.File.createNewFile()
java.io.File.createTempFile(java.lang.String, java.lang.String, java.io.File)
java.io.File.delete()
java.io.File.deleteOnExit()
java.io.File.exists()
java.io.File.getFreeSpace()
java.io.File.getFreeSpace()
java.io.File.getTotalSpace()
java.io.File.getTotalSpace()
java.io.File.getUsableSpace()
java.io.File.getUsableSpace()
java.io.File.isDirectory()
java.io.File.isFile()
java.io.File.isHidden()
java.io.File.lastModified()
java.io.File.length()
java.io.File.mkdir()
java.io.File.normalizedList()
java.io.File.renameTo(java.io.File)
java.io.File.renameTo(java.io.File)
java.io.File.setExecutable(boolean, boolean)
java.io.File.setLastModified(long)
java.io.File.setReadOnly()
java.io.File.setReadable(boolean, boolean)
java.io.File.setWritable(boolean, boolean)
java.io.FileInputStream.<init>(java.io.File)
java.io.FileInputStream.<init>(java.io.FileDescriptor)
java.io.FileOutputStream.<init>(java.io.File, boolean)
java.io.FileOutputStream.<init>(java.io.FileDescriptor)
java.io.ObjectInputFilter$Config.setSerialFilter(java.io.ObjectInputFilter)
java.io.ObjectInputFilter$Config.setSerialFilterFactory(java.util.function.BinaryOperator)
java.io.ObjectInputStream.<init>()
java.io.ObjectInputStream.enableResolveObject(boolean)
java.io.ObjectInputStream.setObjectInputFilter(java.io.ObjectInputFilter)
java.io.ObjectInputStream.verifySubclass()
java.io.ObjectOutputStream.<init>()
java.io.ObjectOutputStream.enableReplaceObject(boolean)
java.io.ObjectOutputStream.verifySubclass()
java.io.RandomAccessFile.<init>(java.io.File, java.lang.String, boolean)
java.io.RandomAccessFile.<init>(java.io.File, java.lang.String, boolean)
java.io.UnixFileSystem.listRoots()
java.io.UnixFileSystem.resolve(java.io.File)
java.lang.Class.checkMemberAccess(java.lang.SecurityManager, int, java.lang.Class, boolean)
java.lang.Class.checkPackageAccess(java.lang.SecurityManager, java.lang.ClassLoader, boolean)
java.lang.Class.checkPackageAccessForPermittedSubclasses(java.lang.SecurityManager, java.lang.ClassLoader, [Ljava.lang.Class;)
java.lang.Class.forName(java.lang.Module, java.lang.String, java.lang.Class)
java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Class)
java.lang.Class.getProtectionDomain()
java.lang.ClassLoader$1.run()
java.lang.ClassLoader.checkClassLoaderPermission(java.lang.ClassLoader, java.lang.Class)
java.lang.ClassLoader.checkCreateClassLoader(java.lang.String)
java.lang.LiveStackFrame.getStackWalker(java.util.Set, jdk.internal.vm.ContinuationScope)
java.lang.LiveStackFrame.getStackWalker(java.util.Set, jdk.internal.vm.ContinuationScope, jdk.internal.vm.Continuation)
java.lang.Module.getClassLoader()
java.lang.ModuleLayer.checkCreateClassLoaderPermission()
java.lang.ModuleLayer.checkGetClassLoaderPermission()
java.lang.ProcessBuilder.environment()
java.lang.ProcessBuilder.start([Ljava.lang.ProcessBuilder$Redirect;)
java.lang.ProcessBuilder.start([Ljava.lang.ProcessBuilder$Redirect;)
java.lang.ProcessHandleImpl.children(long)
java.lang.ProcessHandleImpl.current()
java.lang.ProcessHandleImpl.descendants()
java.lang.ProcessHandleImpl.get(long)
java.lang.ProcessHandleImpl.parent()
java.lang.ProcessImpl.toHandle()
java.lang.Runtime.addShutdownHook(java.lang.Thread)
java.lang.Runtime.exit(int)
java.lang.Runtime.halt(int)
java.lang.Runtime.load0(java.lang.Class, java.lang.String)
java.lang.Runtime.loadLibrary0(java.lang.Class, java.lang.String)
java.lang.Runtime.removeShutdownHook(java.lang.Thread)
java.lang.SecurityManager.<clinit>()
java.lang.SecurityManager.<clinit>()
java.lang.SecurityManager.<clinit>()
java.lang.SecurityManager.<clinit>()
java.lang.SecurityManager.<clinit>()
java.lang.SecurityManager.<clinit>()
java.lang.SecurityManager.<clinit>()
java.lang.SecurityManager.<clinit>()
java.lang.SecurityManager.<init>()
java.lang.SecurityManager.<init>()
java.lang.SecurityManager.<init>()
java.lang.SecurityManager.addNonExportedPackages(java.lang.ModuleLayer)
java.lang.SecurityManager.addNonExportedPackages(java.lang.ModuleLayer)
java.lang.SecurityManager.checkAccept(java.lang.String, int)
java.lang.SecurityManager.checkAccess(java.lang.Thread)
java.lang.SecurityManager.checkAccess(java.lang.Thread)
java.lang.SecurityManager.checkAccess(java.lang.ThreadGroup)
java.lang.SecurityManager.checkAccess(java.lang.ThreadGroup)
java.lang.SecurityManager.checkConnect(java.lang.String, int)
java.lang.SecurityManager.checkConnect(java.lang.String, int)
java.lang.SecurityManager.checkConnect(java.lang.String, int, java.lang.Object)
java.lang.SecurityManager.checkConnect(java.lang.String, int, java.lang.Object)
java.lang.SecurityManager.checkCreateClassLoader()
java.lang.SecurityManager.checkDelete(java.lang.String)
java.lang.SecurityManager.checkExec(java.lang.String)
java.lang.SecurityManager.checkExec(java.lang.String)
java.lang.SecurityManager.checkExit(int)
java.lang.SecurityManager.checkLink(java.lang.String)
java.lang.SecurityManager.checkListen(int)
java.lang.SecurityManager.checkMulticast(java.net.InetAddress)
java.lang.SecurityManager.checkMulticast(java.net.InetAddress, byte)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageAccess(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
java.lang.SecurityManager.checkPrintJobAccess()
java.lang.SecurityManager.checkPropertiesAccess()
java.lang.SecurityManager.checkPropertyAccess(java.lang.String)
java.lang.SecurityManager.checkRead(java.io.FileDescriptor)
java.lang.SecurityManager.checkRead(java.lang.String)
java.lang.SecurityManager.checkRead(java.lang.String, java.lang.Object)
java.lang.SecurityManager.checkSecurityAccess(java.lang.String)
java.lang.SecurityManager.checkSetFactory()
java.lang.SecurityManager.checkWrite(java.io.FileDescriptor)
java.lang.SecurityManager.checkWrite(java.lang.String)
java.lang.SecurityManager.invalidatePackageAccessCache()
java.lang.SecurityManager.invalidatePackageAccessCache()
java.lang.SecurityManager.invalidatePackageAccessCache()
java.lang.SecurityManager.invalidatePackageAccessCache()
java.lang.StackWalker.checkPermission(java.util.Set)
java.lang.System$2.addNonExportedPackages(java.lang.ModuleLayer)
java.lang.System$2.invalidatePackageAccessCache()
java.lang.System$LoggerFinder.checkPermission()
java.lang.System$LoggerFinder.getLoggerFinder()
java.lang.System.checkIO()
java.lang.System.clearProperty(java.lang.String)
java.lang.System.getProperties()
java.lang.System.getProperty(java.lang.String)
java.lang.System.getProperty(java.lang.String, java.lang.String)
java.lang.System.getenv()
java.lang.System.getenv(java.lang.String)
java.lang.System.implSetSecurityManager(java.lang.SecurityManager)
java.lang.System.initPhase3()
java.lang.System.setProperties(java.util.Properties)
java.lang.System.setProperty(java.lang.String, java.lang.String)
java.lang.System.setSecurityManager0(java.lang.SecurityManager)
java.lang.Thread.<init>(java.lang.ThreadGroup, java.lang.String, int, java.lang.Runnable, long, java.security.AccessControlContext)
java.lang.Thread.<init>(java.lang.ThreadGroup, java.lang.String, int, java.lang.Runnable, long, java.security.AccessControlContext)
java.lang.Thread.<init>(java.lang.ThreadGroup, java.lang.String, int, java.lang.Runnable, long, java.security.AccessControlContext)
java.lang.Thread.checkAccess()
java.lang.Thread.getAllStackTraces()
java.lang.Thread.getAllStackTraces()
java.lang.Thread.getStackTrace()
java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)
java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
java.lang.ThreadGroup.checkAccess()
java.lang.invoke.MethodHandles$Lookup.checkSecurityManager(java.lang.Class)
java.lang.invoke.MethodHandles$Lookup.checkSecurityManager(java.lang.Class, java.lang.invoke.MemberName)
java.lang.invoke.MethodHandles$Lookup.ensureDefineClassPermission()
java.lang.invoke.MethodHandles.privateLookupIn(java.lang.Class, java.lang.invoke.MethodHandles$Lookup)
java.lang.invoke.MethodHandles.reflectAs(java.lang.Class, java.lang.invoke.MethodHandle)
java.lang.invoke.MethodType.fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader)
java.lang.management.ManagementFactory.getPlatformMBeanServer()
java.lang.module.ModuleFinder.ofSystem()
java.lang.reflect.AccessibleObject.checkPermission()
java.lang.reflect.Proxy.checkNewProxyPermission(java.lang.Class, java.lang.Class)
java.lang.reflect.Proxy.checkProxyAccess(java.lang.Class, java.lang.ClassLoader, [Ljava.lang.Class;)
java.net.Authenticator.getDefault()
java.net.Authenticator.requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String)
java.net.Authenticator.requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String, java.net.URL, java.net.Authenticator$RequestorType)
java.net.Authenticator.requestPasswordAuthentication(java.net.Authenticator, java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String, java.net.URL, java.net.Authenticator$RequestorType)
java.net.Authenticator.requestPasswordAuthentication(java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String)
java.net.Authenticator.setDefault(java.net.Authenticator)
java.net.CookieHandler.getDefault()
java.net.CookieHandler.setDefault(java.net.CookieHandler)
java.net.DatagramSocket.setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)
java.net.FactoryURLClassLoader.loadClass(java.lang.String, boolean)
java.net.HttpConnectSocketImpl.connect(java.net.SocketAddress, int)
java.net.HttpURLConnection.setFollowRedirects(boolean)
java.net.HttpURLConnection.setRequestMethod(java.lang.String)
java.net.InetAddress.getAllByName0(java.lang.String, boolean, boolean)
java.net.InetAddress.getHostFromNameService(java.net.InetAddress, boolean)
java.net.InetAddress.getLocalHost()
java.net.InetAddress.getLocalHost()
java.net.NetMulticastSocket.bind(java.net.SocketAddress)
java.net.NetMulticastSocket.connectInternal(java.net.InetAddress, int)
java.net.NetMulticastSocket.connectInternal(java.net.InetAddress, int)
java.net.NetMulticastSocket.connectInternal(java.net.InetAddress, int)
java.net.NetMulticastSocket.getLocalAddress()
java.net.NetMulticastSocket.joinGroup(java.net.InetAddress)
java.net.NetMulticastSocket.joinGroup(java.net.SocketAddress, java.net.NetworkInterface)
java.net.NetMulticastSocket.leaveGroup(java.net.InetAddress)
java.net.NetMulticastSocket.leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)
java.net.NetMulticastSocket.receive(java.net.DatagramPacket)
java.net.NetMulticastSocket.send(java.net.DatagramPacket)
java.net.NetMulticastSocket.send(java.net.DatagramPacket)
java.net.NetMulticastSocket.send(java.net.DatagramPacket, byte)
java.net.NetMulticastSocket.send(java.net.DatagramPacket, byte)
java.net.NetworkInterface.getCheckedInetAddresses()
java.net.NetworkInterface.getCheckedInetAddresses()
java.net.NetworkInterface.getHardwareAddress()
java.net.NetworkInterface.getInterfaceAddresses()
java.net.ProxySelector.getDefault()
java.net.ProxySelector.setDefault(java.net.ProxySelector)
java.net.ResponseCache.getDefault()
java.net.ResponseCache.setDefault(java.net.ResponseCache)
java.net.ServerSocket.bind(java.net.SocketAddress, int)
java.net.ServerSocket.checkPermission()
java.net.ServerSocket.getInetAddress()
java.net.ServerSocket.implAccept(java.net.SocketImpl)
java.net.ServerSocket.setSocketFactory(java.net.SocketImplFactory)
java.net.Socket.<init>(java.net.Proxy)
java.net.Socket.<init>(java.net.Proxy)
java.net.Socket.bind(java.net.SocketAddress)
java.net.Socket.checkPermission(java.net.SocketImpl)
java.net.Socket.connect(java.net.SocketAddress, int)
java.net.Socket.connect(java.net.SocketAddress, int)
java.net.Socket.getLocalAddress()
java.net.Socket.setSocketImplFactory(java.net.SocketImplFactory)
java.net.SocksSocketImpl.connect(java.net.SocketAddress, int)
java.net.SocksSocketImpl.connect(java.net.SocketAddress, int)
java.net.URL.checkSpecifyHandler(java.lang.SecurityManager)
java.net.URL.openConnection(java.net.Proxy)
java.net.URL.openConnection(java.net.Proxy)
java.net.URL.setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)
java.net.URLClassLoader$4.run()
java.net.URLClassLoader.close()
java.net.URLConnection.setContentHandlerFactory(java.net.ContentHandlerFactory)
java.net.URLConnection.setFileNameMap(java.net.FileNameMap)
java.net.spi.InetAddressResolverProvider.checkPermission()
java.net.spi.URLStreamHandlerProvider.checkPermission()
java.nio.channels.spi.AsynchronousChannelProvider.checkPermission()
java.nio.channels.spi.SelectorProvider.checkPermission()
java.nio.charset.spi.CharsetProvider.checkPermission()
java.nio.file.spi.FileSystemProvider.checkPermission()
java.nio.file.spi.FileTypeDetector.checkPermission()
java.rmi.RMISecurityManager.<init>()
java.rmi.server.LogStream.setDefaultStream(java.io.PrintStream)
java.rmi.server.RMIClassLoader.getDefaultProviderInstance()
java.rmi.server.RMISocketFactory.setFailureHandler(java.rmi.server.RMIFailureHandler)
java.rmi.server.RMISocketFactory.setSocketFactory(java.rmi.server.RMISocketFactory)
java.security.AccessControlContext.<init>(java.security.AccessControlContext, java.security.DomainCombiner, boolean)
java.security.AccessControlContext.getDomainCombiner()
java.security.Identity.check(java.lang.String)
java.security.IdentityScope.check(java.lang.String)
java.security.Permission.checkGuard(java.lang.Object)
java.security.Policy.checkPermission(java.lang.String)
java.security.Policy.getPolicy()
java.security.Policy.setPolicy(java.security.Policy)
java.security.ProtectionDomain.seeAllp()
java.security.Provider.check(java.lang.String)
java.security.Security.check(java.lang.String)
java.security.Security.checkInsertProvider(java.lang.String)
java.security.Security.checkInsertProvider(java.lang.String)
java.security.Security.getProperty(java.lang.String)
java.security.Signer.check(java.lang.String)
java.sql.DriverManager.deregisterDriver(java.sql.Driver)
java.sql.DriverManager.setLogStream(java.io.PrintStream)
java.sql.DriverManager.setLogWriter(java.io.PrintWriter)
java.util.Locale.setDefault(java.util.Locale$Category, java.util.Locale)
java.util.ResourceBundle.getBundleFromModule(java.lang.Class, java.lang.Module, java.lang.String, java.util.Locale, java.util.ResourceBundle$Control)
java.util.TimeZone.setDefault(java.util.TimeZone)
java.util.concurrent.Executors$DefaultThreadFactory.<init>()
java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader.<init>(java.util.concurrent.Callable)
java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader.<init>(java.util.concurrent.Callable)
java.util.concurrent.Executors$PrivilegedThreadFactory.<init>()
java.util.concurrent.Executors$PrivilegedThreadFactory.<init>()
java.util.concurrent.ForkJoinPool.checkPermission()
java.util.concurrent.ThreadPerTaskExecutor.checkPermission()
java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess()
java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess()
java.util.logging.LogManager$LoggingProviderAccess.demandLoggerFor(java.util.logging.LogManager, java.lang.String, java.lang.Module)
java.util.logging.LogManager.checkPermission()
java.util.logging.LogManager.checkSubclassPermissions()
java.util.logging.LogManager.checkSubclassPermissions()
java.util.prefs.Preferences.factory()
java.util.prefs.Preferences.systemRoot()
java.util.prefs.Preferences.userRoot()
java.util.spi.LocaleServiceProvider.checkPermission()
java.util.zip.ZipFile.<init>(java.io.File, int, java.nio.charset.Charset)
java.util.zip.ZipFile.<init>(java.io.File, int, java.nio.charset.Charset)
javassist.util.proxy.SecurityActions.<init>()
javassist.util.proxy.SecurityActions.getCallerClass()
javax.accessibility.AccessibilityProvider.checkPermission()
javax.imageio.ImageIO.hasCachePermission()
javax.management.MBeanServerFactory.checkPermission(java.lang.String)
javax.management.monitor.Monitor$DaemonThreadFactory.<init>(java.lang.String)
javax.management.monitor.Monitor$MonitorTask.<init>(javax.management.monitor.Monitor)
javax.naming.ldap.spi.LdapDnsProvider.checkPermission()
javax.naming.spi.NamingManager.setInitialContextFactoryBuilder(javax.naming.spi.InitialContextFactoryBuilder)
javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)
javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)
javax.net.ssl.HttpsURLConnection.setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)
javax.net.ssl.SSLContext.setDefault(javax.net.ssl.SSLContext)
javax.print.PrintServiceLookup.getMultiDocServices([Ljavax.print.DocFlavor;, javax.print.attribute.AttributeSet)
javax.print.PrintServiceLookup.getServices(javax.print.DocFlavor, javax.print.attribute.AttributeSet)
javax.security.auth.Subject$ClassSet.populateSet()
javax.security.auth.Subject$SecureSet$1.next()
javax.security.auth.Subject$SecureSet$1.remove()
javax.security.auth.Subject$SecureSet$1.remove()
javax.security.auth.Subject$SecureSet$1.remove()
javax.security.auth.Subject$SecureSet.add(java.lang.Object)
javax.security.auth.Subject$SecureSet.add(java.lang.Object)
javax.security.auth.Subject$SecureSet.add(java.lang.Object)
javax.security.auth.Subject$SecureSet.contains(java.lang.Object)
javax.security.auth.Subject.doAs(javax.security.auth.Subject, java.security.PrivilegedAction)
javax.security.auth.Subject.doAs(javax.security.auth.Subject, java.security.PrivilegedExceptionAction)
javax.security.auth.Subject.doAsPrivileged(javax.security.auth.Subject, java.security.PrivilegedAction, java.security.AccessControlContext)
javax.security.auth.Subject.doAsPrivileged(javax.security.auth.Subject, java.security.PrivilegedExceptionAction, java.security.AccessControlContext)
javax.security.auth.Subject.getSubject(java.security.AccessControlContext)
javax.security.auth.Subject.setReadOnly()
javax.security.auth.SubjectDomainCombiner.getSubject()
javax.security.auth.kerberos.KerberosPrincipal.<init>(java.lang.String, int)
javax.security.auth.login.Configuration.checkPermission(java.lang.String)
javax.security.auth.login.Configuration.getConfiguration()
javax.security.auth.login.Configuration.setConfiguration(javax.security.auth.login.Configuration)
javax.security.auth.login.LoginContext.init(java.lang.String)
javax.security.auth.login.LoginContext.init(java.lang.String)
javax.sql.rowset.spi.SyncFactory.setJNDIContext(javax.naming.Context)
javax.sql.rowset.spi.SyncFactory.setLogger(java.util.logging.Logger)
javax.sql.rowset.spi.SyncFactory.setLogger(java.util.logging.Logger, java.util.logging.Level)
javax.swing.JFrame.setDefaultCloseOperation(int)
jdk.dynalink.SecureLookupSupplier.getLookup()
jdk.dynalink.beans.CheckRestrictedPackage.isRestrictedClass(java.lang.Class)
jdk.dynalink.linker.GuardingDynamicLinkerExporter.<init>()
jdk.internal.jrtfs.JrtFileSystemProvider.checkPermission()
jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.lang.String, boolean)
jdk.internal.loader.Loader.loadClass(java.lang.String, boolean)
jdk.internal.loader.URLClassPath.check(java.net.URL)
jdk.internal.loader.URLClassPath.check(java.net.URL)
jdk.internal.loader.URLClassPath.check(java.net.URL)
jdk.internal.logger.DefaultLoggerFinder.checkPermission()
jdk.internal.logger.LoggerFinderLoader.getLoggerFinder()
jdk.internal.module.SystemModuleFinders$SystemModuleReader.checkPermissionToConnect(java.net.URI)
jdk.internal.net.http.Exchange.checkPermissions()
jdk.internal.net.http.Exchange.checkPermissions()
jdk.internal.net.http.Exchange.checkPermissions()
jdk.internal.net.http.HttpClientImpl.<init>(jdk.internal.net.http.HttpClientBuilderImpl, jdk.internal.net.http.HttpClientImpl$SingleFacadeFactory)
jdk.internal.net.http.RequestPublishers$FilePublisher.create(java.nio.file.Path)
jdk.internal.net.http.ResponseBodyHandlers$FileDownloadBodyHandler.create(java.nio.file.Path, java.util.List)
jdk.internal.net.http.ResponseBodyHandlers$FileDownloadBodyHandler.create(java.nio.file.Path, java.util.List)
jdk.internal.net.http.ResponseBodyHandlers$PathBodyHandler.create(java.nio.file.Path, java.util.List)
jdk.internal.net.http.ResponseSubscribers$PathSubscriber.create(java.nio.file.Path, java.util.List)
jdk.internal.net.http.websocket.OpeningHandshake.checkPermissions(jdk.internal.net.http.websocket.BuilderImpl, java.net.Proxy)
jdk.internal.net.http.websocket.OpeningHandshake.checkPermissions(jdk.internal.net.http.websocket.BuilderImpl, java.net.Proxy)
jdk.internal.perf.Perf.getPerf()
jdk.internal.reflect.ReflectionFactory.getReflectionFactory()
jdk.jfr.internal.Utils.checkAccessFlightRecorder()
jdk.jfr.internal.Utils.checkRegisterPermission()
jdk.management.jfr.MBeanUtils.checkControl()
jdk.management.jfr.MBeanUtils.checkMonitor()
jdk.nio.Channels.readWriteSelectableChannel(java.io.FileDescriptor, jdk.nio.Channels$SelectableChannelCloser)
jdk.nio.Channels.readWriteSelectableChannel(java.io.FileDescriptor, jdk.nio.Channels$SelectableChannelCloser)
jdk.tools.jlink.internal.Jlink.<init>()
jdk.tools.jlink.internal.Main.run(java.io.PrintWriter, java.io.PrintWriter, [Ljava.lang.String;)
jdk.vm.ci.services.JVMCIServiceLocator.checkPermission()
jdk.vm.ci.services.JVMCIServiceLocator.getProviders(java.lang.Class)
jdk.vm.ci.services.Services.getSavedProperties()
jdk.vm.ci.services.Services.load(java.lang.Class)
jdk.vm.ci.services.Services.loadSingle(java.lang.Class, boolean)
org.slf4j.helpers.Util$ClassContextSecurityManager.<init>()
org.slf4j.helpers.Util$ClassContextSecurityManager.getClassContext()
sun.awt.AppContext$3.run()
sun.awt.SunToolkit.canPopupOverlapTaskBar()
sun.awt.SunToolkit.checkPermissions(java.lang.String)
sun.awt.SunToolkit.checkPermissions(java.net.URL)
sun.awt.SunToolkit.checkPermissions(java.net.URL)
sun.awt.X11.XToolkit.getSystemClipboard()
sun.awt.X11.XToolkit.getSystemSelection()
sun.awt.X11GraphicsDevice.isFullScreenSupported()
sun.awt.dnd.SunDropTargetContextPeer.getTransferData(java.awt.datatransfer.DataFlavor)
sun.awt.image.FileImageSource.<init>(java.lang.String)
sun.awt.image.ImageConsumerQueue.<init>(sun.awt.image.InputStreamImageSource, java.awt.image.ImageConsumer)
sun.awt.image.InputStreamImageSource.addConsumer(java.awt.image.ImageConsumer, boolean)
sun.awt.image.URLImageSource.<init>(java.net.URL)
sun.awt.image.URLImageSource.<init>(java.net.URL)
sun.awt.image.URLImageSource.checkSecurity(java.lang.Object, boolean)
sun.awt.shell.ShellFolderManager.checkFile(java.io.File, java.lang.SecurityManager)
sun.awt.shell.ShellFolderManager.checkFile(java.io.File, java.lang.SecurityManager)
sun.font.FileFont.getPublicFileName()
sun.java2d.SurfaceData.checkCustomComposite()
sun.jvm.hotspot.SALauncherLoader.loadClass(java.lang.String, boolean)
sun.management.Util.checkAccess(java.lang.management.ManagementPermission)
sun.net.ftp.FtpClientProvider.<init>()
sun.net.httpserver.simpleserver.FileServerHandler.<init>(java.nio.file.Path, java.util.function.UnaryOperator)
sun.net.www.MimeTable.saveAsProperties(java.io.File)
sun.net.www.http.HttpClient.New(java.net.URL, java.net.Proxy, int, boolean, sun.net.www.protocol.http.HttpURLConnection)
sun.net.www.http.HttpClient.New(java.net.URL, java.net.Proxy, int, boolean, sun.net.www.protocol.http.HttpURLConnection)
sun.net.www.http.HttpClient.openServer()
sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(java.net.URL)
sun.net.www.protocol.http.HttpURLConnection.checkSetHost()
sun.net.www.protocol.http.HttpURLConnection.checkURLFile()
sun.net.www.protocol.http.HttpURLConnection.followRedirect0(java.lang.String, int, java.net.URL)
sun.net.www.protocol.https.HttpsClient.New(javax.net.ssl.SSLSocketFactory, java.net.URL, javax.net.ssl.HostnameVerifier, java.net.Proxy, boolean, int, sun.net.www.protocol.http.HttpURLConnection)
sun.net.www.protocol.https.HttpsClient.New(javax.net.ssl.SSLSocketFactory, java.net.URL, javax.net.ssl.HostnameVerifier, java.net.Proxy, boolean, int, sun.net.www.protocol.http.HttpURLConnection)
sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(java.net.URL)
sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(java.net.URL)
sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(java.net.URL)
sun.net.www.protocol.mailto.MailToURLConnection.getFromAddress()
sun.nio.ch.AsynchronousServerSocketChannelImpl.bind(java.net.SocketAddress, int)
sun.nio.ch.AsynchronousSocketChannelImpl.bind(java.net.SocketAddress)
sun.nio.ch.DatagramChannelImpl.bindInternal(java.net.SocketAddress)
sun.nio.ch.DatagramChannelImpl.blockingReceive(java.net.DatagramPacket, long)
sun.nio.ch.DatagramChannelImpl.connect(java.net.SocketAddress, boolean)
sun.nio.ch.DatagramChannelImpl.connect(java.net.SocketAddress, boolean)
sun.nio.ch.DatagramChannelImpl.connect(java.net.SocketAddress, boolean)
sun.nio.ch.DatagramChannelImpl.innerJoin(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)
sun.nio.ch.DatagramChannelImpl.send(java.nio.ByteBuffer, java.net.SocketAddress)
sun.nio.ch.DatagramChannelImpl.send(java.nio.ByteBuffer, java.net.SocketAddress)
sun.nio.ch.DatagramChannelImpl.untrustedReceive(java.nio.ByteBuffer)
sun.nio.ch.DatagramSocketAdaptor.getLocalAddress()
sun.nio.ch.DatagramSocketAdaptor.getLocalSocketAddress()
sun.nio.ch.DatagramSocketAdaptor.joinGroup(java.net.SocketAddress, java.net.NetworkInterface)
sun.nio.ch.DatagramSocketAdaptor.leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)
sun.nio.ch.InheritedChannel.checkAccess()
sun.nio.ch.Net.getRevealedLocalAddress(java.net.SocketAddress)
sun.nio.ch.ServerSocketChannelImpl.finishAccept(java.io.FileDescriptor, java.net.SocketAddress)
sun.nio.ch.ServerSocketChannelImpl.netBind(java.net.SocketAddress, int)
sun.nio.ch.SocketChannelImpl.checkRemote(java.net.SocketAddress)
sun.nio.ch.SocketChannelImpl.netBind(java.net.SocketAddress)
sun.nio.ch.UnixAsynchronousServerSocketChannelImpl$1.run()
sun.nio.ch.UnixAsynchronousServerSocketChannelImpl.finishAccept(java.io.FileDescriptor, java.net.InetSocketAddress, java.security.AccessControlContext)
sun.nio.ch.UnixAsynchronousSocketChannelImpl.implConnect(java.net.SocketAddress, java.lang.Object, java.nio.channels.CompletionHandler)
sun.nio.ch.UnixDomainSockets.checkPermission()
sun.nio.ch.sctp.SctpChannelImpl.bind(java.net.SocketAddress)
sun.nio.ch.sctp.SctpChannelImpl.connect(java.net.SocketAddress)
sun.nio.ch.sctp.SctpMultiChannelImpl.bind(java.net.SocketAddress, int)
sun.nio.ch.sctp.SctpMultiChannelImpl.receive(java.nio.ByteBuffer, java.lang.Object, com.sun.nio.sctp.NotificationHandler)
sun.nio.ch.sctp.SctpMultiChannelImpl.send(java.nio.ByteBuffer, com.sun.nio.sctp.MessageInfo)
sun.nio.ch.sctp.SctpNet.getRevealedLocalAddress(java.net.SocketAddress, java.lang.SecurityManager)
sun.nio.ch.sctp.SctpServerChannelImpl.accept()
sun.nio.ch.sctp.SctpServerChannelImpl.bind(java.net.SocketAddress, int)
sun.nio.fs.AbstractUserDefinedFileAttributeView.checkAccess(java.lang.String, boolean, boolean)
sun.nio.fs.AbstractUserDefinedFileAttributeView.checkAccess(java.lang.String, boolean, boolean)
sun.nio.fs.AbstractUserDefinedFileAttributeView.checkAccess(java.lang.String, boolean, boolean)
sun.nio.fs.UnixChannelFactory.open(int, sun.nio.fs.UnixPath, java.lang.String, sun.nio.fs.UnixChannelFactory$Flags, int)
sun.nio.fs.UnixChannelFactory.open(int, sun.nio.fs.UnixPath, java.lang.String, sun.nio.fs.UnixChannelFactory$Flags, int)
sun.nio.fs.UnixChannelFactory.open(int, sun.nio.fs.UnixPath, java.lang.String, sun.nio.fs.UnixChannelFactory$Flags, int)
sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended()
sun.nio.fs.UnixFileAttributeViews$Posix.checkWriteExtended()
sun.nio.fs.UnixFileSystem$1.iterator()
sun.nio.fs.UnixFileSystem$FileStoreIterator.readNext()
sun.nio.fs.UnixFileSystem.copy(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath, [Ljava.nio.file.CopyOption;)
sun.nio.fs.UnixFileSystem.getFileStores()
sun.nio.fs.UnixFileSystemProvider.checkAccess(java.nio.file.Path, [Ljava.nio.file.AccessMode;)
sun.nio.fs.UnixFileSystemProvider.createLink(java.nio.file.Path, java.nio.file.Path)
sun.nio.fs.UnixFileSystemProvider.createSymbolicLink(java.nio.file.Path, java.nio.file.Path, [Ljava.nio.file.attribute.FileAttribute;)
sun.nio.fs.UnixFileSystemProvider.getFileStore(java.nio.file.Path)
sun.nio.fs.UnixFileSystemProvider.readSymbolicLink(java.nio.file.Path)
sun.nio.fs.UnixPath.checkDelete()
sun.nio.fs.UnixPath.checkRead()
sun.nio.fs.UnixPath.checkWrite()
sun.nio.fs.UnixPath.toAbsolutePath()
sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl.checkWriteAndUserAccess()
sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl.readAttributes()
sun.nio.fs.UnixUserPrincipals.lookupName(java.lang.String, boolean)
sun.print.IPPPrintService.createPrintJob()
sun.print.PrintJob2D.initPrintJob2D(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes)
sun.print.PrintJob2D.throwPrintToFile()
sun.print.PrintServiceLookupProvider.getDefaultPrintService()
sun.print.PrintServiceLookupProvider.getMultiDocPrintServices([Ljavax.print.DocFlavor;, javax.print.attribute.AttributeSet)
sun.print.PrintServiceLookupProvider.getPrintServices()
sun.print.PrintServiceLookupProvider.getPrintServices(javax.print.DocFlavor, javax.print.attribute.AttributeSet)
sun.print.RasterPrinterJob.throwPrintToFile()
sun.print.ServiceDialog$PrintServicePanel.throwPrintToFile()
sun.print.UnixPrintJob.getAttributeValues(javax.print.DocFlavor)
sun.print.UnixPrintService.createPrintJob()
sun.reflect.ReflectionFactory.getReflectionFactory()
sun.reflect.misc.ReflectUtil.checkPackageAccess(java.lang.String)
sun.reflect.misc.ReflectUtil.conservativeCheckMemberAccess(java.lang.reflect.Member)
sun.reflect.misc.ReflectUtil.privateCheckPackageAccess(java.lang.SecurityManager, java.lang.Class)
sun.rmi.registry.RegistryImpl.createRegistry(int)
sun.rmi.runtime.NewThreadAction.run()
sun.rmi.runtime.RuntimeUtil.getInstance()
sun.rmi.server.LoaderHandler$Loader.checkPermissions()
sun.rmi.server.LoaderHandler.getClassAnnotation(java.lang.Class)
sun.rmi.server.LoaderHandler.getClassLoader(java.lang.String)
sun.rmi.transport.tcp.TCPChannel.checkConnectPermission()
sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.checkAcceptPermission(java.lang.SecurityManager, java.security.AccessControlContext)
sun.rmi.transport.tcp.TCPTransport.listen()
sun.security.jgss.krb5.InitialToken$OverloadedChecksum.<init>(sun.security.jgss.krb5.InitialToken, sun.security.jgss.krb5.Krb5Context, sun.security.krb5.Credentials, sun.security.krb5.Credentials)
sun.security.jgss.krb5.Krb5Context.checkPermission(java.lang.String, java.lang.String)
sun.security.jgss.krb5.Krb5MechFactory.checkAcceptCredPermission(sun.security.jgss.krb5.Krb5NameElement, sun.security.jgss.spi.GSSNameSpi)
sun.security.jgss.krb5.Krb5MechFactory.checkInitCredPermission(sun.security.jgss.krb5.Krb5NameElement)
sun.security.jgss.krb5.Krb5NameElement.getInstance(java.lang.String, org.ietf.jgss.Oid)
sun.security.jgss.wrapper.GSSNameElement.<init>([B, org.ietf.jgss.Oid, sun.security.jgss.wrapper.GSSLibStub)
sun.security.jgss.wrapper.Krb5Util.checkServicePermission(java.lang.String, java.lang.String)
sun.security.jgss.wrapper.NativeGSSContext.doDelegPermCheck()
sun.security.pkcs11.SunPKCS11.login(javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler)
sun.security.pkcs11.SunPKCS11.logout()
sun.security.pkcs11.SunPKCS11.setCallbackHandler(javax.security.auth.callback.CallbackHandler)
sun.security.provider.ConfigFile$Spi.engineRefresh()
sun.security.provider.certpath.ldap.LDAPCertStore.<init>(java.security.cert.CertStoreParameters)
sun.security.smartcardio.CardImpl.checkSecurity(java.lang.String)
sun.security.smartcardio.TerminalImpl.connect(java.lang.String)
sun.security.ssl.SSLSessionImpl.getSessionContext()
sun.security.ssl.SecureKey.getCurrentSecurityContext()
sun.swing.SwingUtilities2.canAccessSystemClipboard()
sun.tools.attach.HotSpotAttachProvider.checkAttachPermission()
sun.util.logging.internal.LoggingProviderImpl.demandLoggerFor(java.lang.String, java.lang.Module)
sun.util.logging.internal.LoggingProviderImpl.getLogManagerAccess()
sun.util.logging.internal.LoggingProviderImpl.setLogManagerAccess(sun.util.logging.internal.LoggingProviderImpl$LogManagerAccess)