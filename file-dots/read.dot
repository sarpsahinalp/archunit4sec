strict digraph G {
  1 [ label="java.io.FileInputStream.<init>(java.io.FileDescriptor)" ];
  2 [ label="java.lang.SecurityManager.checkRead(java.io.FileDescriptor)" ];
  3 [ label="jdk.nio.Channels.readWriteSelectableChannel(java.io.FileDescriptor, jdk.nio.Channels$SelectableChannelCloser)" ];
  4 [ label="com.sun.jmx.remote.security.HashedPasswordManager.loadPasswords()" ];
  5 [ label="java.lang.SecurityManager.checkRead(java.lang.String)" ];
  6 [ label="java.io.File.lastModified()" ];
  7 [ label="java.io.File.canRead()" ];
  8 [ label="java.io.File.isDirectory()" ];
  9 [ label="java.io.File.isHidden()" ];
  10 [ label="java.io.File.getFreeSpace()" ];
  11 [ label="java.io.File.length()" ];
  12 [ label="java.io.File.getUsableSpace()" ];
  13 [ label="java.io.File.normalizedList()" ];
  14 [ label="java.io.File.isFile()" ];
  15 [ label="java.io.File.exists()" ];
  16 [ label="java.io.File.getTotalSpace()" ];
  17 [ label="java.io.FileInputStream.<init>(java.io.File)" ];
  18 [ label="java.io.RandomAccessFile.<init>(java.io.File, java.lang.String, boolean)" ];
  19 [ label="java.io.UnixFileSystem.listRoots()" ];
  20 [ label="java.lang.ProcessBuilder.start([Ljava.lang.ProcessBuilder$Redirect;)" ];
  21 [ label="java.util.zip.ZipFile.<init>(java.io.File, int, java.nio.charset.Charset)" ];
  22 [ label="jdk.internal.loader.URLClassPath.check(java.net.URL)" ];
  23 [ label="sun.awt.SunToolkit.checkPermissions(java.lang.String)" ];
  24 [ label="sun.awt.image.FileImageSource.<init>(java.lang.String)" ];
  25 [ label="sun.awt.shell.ShellFolderManager.checkFile(java.io.File, java.lang.SecurityManager)" ];
  26 [ label="sun.net.httpserver.simpleserver.FileServerHandler.<init>(java.nio.file.Path, java.util.function.UnaryOperator)" ];
  27 [ label="sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(java.net.URL)" ];
  28 [ label="sun.nio.fs.AbstractUserDefinedFileAttributeView.checkAccess(java.lang.String, boolean, boolean)" ];
  29 [ label="sun.nio.fs.UnixChannelFactory.open(int, sun.nio.fs.UnixPath, java.lang.String, sun.nio.fs.UnixChannelFactory$Flags, int)" ];
  30 [ label="sun.nio.fs.UnixFileSystem$1.iterator()" ];
  31 [ label="sun.nio.fs.UnixFileSystem$FileStoreIterator.readNext()" ];
  32 [ label="sun.nio.fs.UnixPath.checkRead()" ];
  1 -> 2;
  3 -> 2;
  4 -> 5;
  6 -> 5;
  7 -> 5;
  8 -> 5;
  9 -> 5;
  10 -> 5;
  11 -> 5;
  12 -> 5;
  13 -> 5;
  14 -> 5;
  15 -> 5;
  16 -> 5;
  17 -> 5;
  18 -> 5;
  19 -> 5;
  20 -> 5;
  21 -> 5;
  22 -> 5;
  23 -> 5;
  24 -> 5;
  25 -> 5;
  26 -> 5;
  27 -> 5;
  28 -> 5;
  29 -> 5;
  30 -> 5;
  31 -> 5;
  32 -> 5;
}
