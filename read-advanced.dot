strict digraph G {
  1 [ label="java.io.UnixFileSystem.getSeparator()" ];
  2 [ label="java.io.UnixFileSystem.slash" ];
  3 [ label="java.io.UnixFileSystem.<init>()" ];
  4 [ label="java.io.UnixFileSystem.resolve(java.io.File)" ];
  5 [ label="java.io.UnixFileSystem.userDir" ];
  6 [ label="java.io.UnixFileSystem.getPathSeparator()" ];
  7 [ label="java.io.UnixFileSystem.colon" ];
  8 [ label="java.io.UnixFileSystem.delete(java.io.File)" ];
  9 [ label="java.io.UnixFileSystem.delete0(java.io.File)" ];
  10 [ label="java.io.UnixFileSystem.getLastModifiedTime(java.io.File)" ];
  11 [ label="java.io.UnixFileSystem.getLastModifiedTime0(java.io.File)" ];
  12 [ label="java.io.UnixFileSystem.getLength(java.io.File)" ];
  13 [ label="java.io.UnixFileSystem.getLength0(java.io.File)" ];
  14 [ label="java.io.UnixFileSystem.createDirectory(java.io.File)" ];
  15 [ label="java.io.UnixFileSystem.createDirectory0(java.io.File)" ];
  16 [ label="java.io.UnixFileSystem.rename(java.io.File, java.io.File)" ];
  17 [ label="java.io.UnixFileSystem.rename0(java.io.File, java.io.File)" ];
  18 [ label="java.io.UnixFileSystem.getSpace(java.io.File, int)" ];
  19 [ label="java.io.UnixFileSystem.getSpace0(java.io.File, int)" ];
  20 [ label="java.io.UnixFileSystem.setReadOnly(java.io.File)" ];
  21 [ label="java.io.UnixFileSystem.setReadOnly0(java.io.File)" ];
  22 [ label="java.io.UnixFileSystem.canonicalize(java.lang.String)" ];
  23 [ label="java.io.UnixFileSystem.canonicalize0(java.lang.String)" ];
  24 [ label="java.io.UnixFileSystem.setLastModifiedTime(java.io.File, long)" ];
  25 [ label="java.io.UnixFileSystem.setLastModifiedTime0(java.io.File, long)" ];
  26 [ label="java.io.UnixFileSystem.resolve(java.lang.String, java.lang.String)" ];
  27 [ label="java.io.UnixFileSystem.getNameMax(java.lang.String)" ];
  28 [ label="java.io.UnixFileSystem.getNameMax0(java.lang.String)" ];
  29 [ label="java.io.UnixFileSystem.trimSeparator(java.lang.String)" ];
  30 [ label="java.io.UnixFileSystem.isAbsolute(java.io.File)" ];
  31 [ label="java.io.UnixFileSystem.createFileExclusively(java.lang.String)" ];
  32 [ label="java.io.UnixFileSystem.createFileExclusively0(java.lang.String)" ];
  33 [ label="java.io.UnixFileSystem.<clinit>()" ];
  34 [ label="java.io.UnixFileSystem.initIDs()" ];
  35 [ label="java.io.UnixFileSystem.hasBooleanAttributes(java.io.File, int)" ];
  36 [ label="java.io.UnixFileSystem.getBooleanAttributes0(java.io.File)" ];
  37 [ label="java.io.UnixFileSystem.getBooleanAttributes(java.io.File)" ];
  38 [ label="java.io.UnixFileSystem.checkAccess(java.io.File, int)" ];
  39 [ label="java.io.UnixFileSystem.checkAccess0(java.io.File, int)" ];
  40 [ label="java.io.UnixFileSystem.normalize(java.lang.String)" ];
  41 [ label="java.io.UnixFileSystem.normalize(java.lang.String, int)" ];
  42 [ label="java.io.UnixFileSystem.isHidden(java.io.File)" ];
  43 [ label="java.io.UnixFileSystem.setPermission(java.io.File, int, boolean, boolean)" ];
  44 [ label="java.io.UnixFileSystem.setPermission0(java.io.File, int, boolean, boolean)" ];
  45 [ label="java.io.UnixFileSystem.list(java.io.File)" ];
  46 [ label="java.io.UnixFileSystem.list0(java.io.File)" ];
  47 [ label="java.io.DefaultFileSystem.getFileSystem()" ];
  48 [ label="java.io.File.getCanonicalPath()" ];
  49 [ label="java.io.FileSystem.resolve(java.io.File)" ];
  50 [ label="java.io.File.getAbsolutePath()" ];
  51 [ label="java.io.File.<init>(java.net.URI)" ];
  52 [ label="java.io.FileSystem.fromURIPath(java.lang.String)" ];
  53 [ label="java.io.FileSystem.canonicalize(java.lang.String)" ];
  54 [ label="java.io.File.lastModified()" ];
  55 [ label="java.io.FileSystem.getLastModifiedTime(java.io.File)" ];
  56 [ label="java.io.File.<clinit>()" ];
  57 [ label="java.io.FileSystem.getPathSeparator()" ];
  58 [ label="java.io.File.setReadOnly()" ];
  59 [ label="java.io.FileSystem.setReadOnly(java.io.File)" ];
  60 [ label="java.io.File.renameTo(java.io.File)" ];
  61 [ label="java.io.FileSystem.rename(java.io.File, java.io.File)" ];
  62 [ label="java.io.File.<init>(java.lang.String, java.io.File)" ];
  63 [ label="java.io.FileSystem.resolve(java.lang.String, java.lang.String)" ];
  64 [ label="java.io.File.<init>(java.lang.String, java.lang.String)" ];
  65 [ label="java.io.File.<init>(java.io.File, java.lang.String)" ];
  66 [ label="java.io.File.isInvalid()" ];
  67 [ label="java.io.FileSystem.isInvalid(java.io.File)" ];
  68 [ label="java.io.File.setLastModified(long)" ];
  69 [ label="java.io.FileSystem.setLastModifiedTime(java.io.File, long)" ];
  70 [ label="java.io.FileSystem.hasBooleanAttributes(java.io.File, int)" ];
  71 [ label="java.io.FileSystem.getBooleanAttributes(java.io.File)" ];
  72 [ label="java.io.File.length()" ];
  73 [ label="java.io.FileSystem.getLength(java.io.File)" ];
  74 [ label="java.io.File.hashCode()" ];
  75 [ label="java.io.FileSystem.hashCode(java.io.File)" ];
  76 [ label="java.io.FileSystem.getDefaultParent()" ];
  77 [ label="java.io.File$TempDirectory.generateFile(java.lang.String, java.lang.String, java.io.File)" ];
  78 [ label="java.io.FileSystem.getNameMax(java.lang.String)" ];
  79 [ label="java.io.File.isHidden()" ];
  80 [ label="java.io.File.isDirectory()" ];
  81 [ label="java.io.File.createTempFile(java.lang.String, java.lang.String, java.io.File)" ];
  82 [ label="java.io.File.isFile()" ];
  83 [ label="java.io.File.exists()" ];
  84 [ label="java.io.File.readObject(java.io.ObjectInputStream)" ];
  85 [ label="java.io.FileSystem.prefixLength(java.lang.String)" ];
  86 [ label="java.io.File.getAbsoluteFile()" ];
  87 [ label="java.io.File.getCanonicalFile()" ];
  88 [ label="java.io.File.<init>(java.lang.String)" ];
  89 [ label="java.io.File.delete()" ];
  90 [ label="java.io.FileSystem.delete(java.io.File)" ];
  91 [ label="java.io.File.isAbsolute()" ];
  92 [ label="java.io.FileSystem.isAbsolute(java.io.File)" ];
  93 [ label="java.io.File.canRead()" ];
  94 [ label="java.io.FileSystem.checkAccess(java.io.File, int)" ];
  95 [ label="java.io.File.canWrite()" ];
  96 [ label="java.io.File.canExecute()" ];
  97 [ label="java.io.FileSystem.normalize(java.lang.String)" ];
  98 [ label="java.io.File.getParentFile()" ];
  99 [ label="java.io.File.normalizedList()" ];
  100 [ label="java.io.File.getFreeSpace()" ];
  101 [ label="java.io.FileSystem.getSpace(java.io.File, int)" ];
  102 [ label="java.io.File.getUsableSpace()" ];
  103 [ label="java.io.File.getTotalSpace()" ];
  104 [ label="java.io.File.listRoots()" ];
  105 [ label="java.io.FileSystem.listRoots()" ];
  106 [ label="java.io.FileSystem.getSeparator()" ];
  107 [ label="java.io.File.mkdir()" ];
  108 [ label="java.io.FileSystem.createDirectory(java.io.File)" ];
  109 [ label="java.io.FileSystem.createFileExclusively(java.lang.String)" ];
  110 [ label="java.io.File.createNewFile()" ];
  111 [ label="java.io.FileSystem.list(java.io.File)" ];
  112 [ label="java.io.File.compareTo(java.io.File)" ];
  113 [ label="java.io.FileSystem.compare(java.io.File, java.io.File)" ];
  114 [ label="java.io.File.setExecutable(boolean, boolean)" ];
  115 [ label="java.io.FileSystem.setPermission(java.io.File, int, boolean, boolean)" ];
  116 [ label="java.io.File.setReadable(boolean, boolean)" ];
  117 [ label="java.io.File.setWritable(boolean, boolean)" ];
  118 [ label="java.io.FileSystem.<init>()" ];
  1 -> 2;
  3 -> 2;
  4 -> 5;
  3 -> 5;
  6 -> 7;
  3 -> 7;
  8 -> 9;
  10 -> 11;
  12 -> 13;
  14 -> 15;
  16 -> 17;
  18 -> 19;
  20 -> 21;
  22 -> 23;
  24 -> 25;
  4 -> 26;
  27 -> 28;
  26 -> 29;
  4 -> 30;
  31 -> 32;
  33 -> 34;
  35 -> 36;
  37 -> 36;
  38 -> 39;
  40 -> 41;
  35 -> 42;
  37 -> 42;
  43 -> 44;
  45 -> 46;
  47 -> 3;
  48 -> 49;
  50 -> 49;
  51 -> 52;
  48 -> 53;
  54 -> 55;
  56 -> 57;
  58 -> 59;
  60 -> 61;
  62 -> 63;
  64 -> 63;
  65 -> 63;
  66 -> 67;
  68 -> 69;
  70 -> 71;
  72 -> 73;
  74 -> 75;
  64 -> 76;
  65 -> 76;
  77 -> 78;
  79 -> 70;
  80 -> 70;
  81 -> 70;
  82 -> 70;
  83 -> 70;
  84 -> 85;
  86 -> 85;
  87 -> 85;
  88 -> 85;
  64 -> 85;
  65 -> 85;
  51 -> 85;
  89 -> 90;
  91 -> 92;
  93 -> 94;
  95 -> 94;
  96 -> 94;
  84 -> 97;
  86 -> 97;
  98 -> 97;
  87 -> 97;
  99 -> 97;
  88 -> 97;
  64 -> 97;
  65 -> 97;
  51 -> 97;
  77 -> 97;
  100 -> 101;
  102 -> 101;
  103 -> 101;
  104 -> 105;
  56 -> 106;
  107 -> 108;
  81 -> 109;
  110 -> 109;
  99 -> 111;
  112 -> 113;
  114 -> 115;
  116 -> 115;
  117 -> 115;
  3 -> 118;
}
